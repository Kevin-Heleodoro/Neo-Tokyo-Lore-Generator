name: Neo Tokyo Lore Generator CI

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

jobs:
    # Job for the backend
    build-backend:
        name: Backend Build and Test
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Use Node.js 18.x
              uses: actions/setup-node@v3
              with:
                  node-version: 18

            - name: Set up backend dependencies
              working-directory: ./backend
              run: npm install

            # - name: Build backend
            #   working-directory: ./backend
            #   run: npm run build

        # Build backend
        # build-backend:
        #     name: Build Backend Docker Image
        #     runs-on: ubuntu-latest
        #     steps:
        #         - name: Checkout code
        #           uses: actions/checkout@v3

        #         - name: Set up QEMU
        #           uses: docker/setup-qemu-action@v2

        #         - name: Set up Docker Buildx
        #           uses: docker/setup-buildx-action@v2

        #         - name: Login to DockerHub
        #           uses: docker/login-action@v2
        #           with:
        #               username: ${{ secrets.DOCKER_USERNAME }}
        #               password: ${{ secrets.DOCKER_PASSWORD }}

        #         - name: Build backend Docker image
        #           run: |
        #               docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/neo-tokyo-lore-generator-backend:latest --push ./backend

        # Build frontend
    build-frontend:
        name: Build Frontend Docker Image
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v2

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            # - name: Login to DockerHub
            #   uses: docker/login-action@v2
            #   with:
            #       username: ${{ secrets.DOCKER_USERNAME }}
            #       password: ${{ secrets.DOCKER_PASSWORD }}

            # - name: Build frontend Docker image
            #   run: |
            #       docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/neo-tokyo-lore-generator-frontend:latest --push ./frontend

        # Deploy frontend to Netlify
        # deploy-frontend:
        #     name: Deploy Frontend to Netlify
        #     runs-on: ubuntu-latest
        #     needs: build-frontend
        #     steps:
        #         - name: Checkout code
        #           uses: actions/checkout@v3

        #         - name: Install Netlify CLI
        #           run: npm install -g netlify-cli

        #         - name: Deploy frontend to Netlify
        #           run: |
        #               netlify deploy --site ${{ secrets.NETLIFY_SITE_ID }} --auth ${{ secrets.NETLIFY_AUTH_TOKEN }} --prod

        # Job for setting up Node.js
        # setup-node:
        #   name: Set up Node.js
        #   runs-on: ubuntu-latest
        #   steps:
        #     - name: Checkout code
        #       uses: actions/checkout@v3

        #     - name: Use Node.js 18.x
        #       uses: actions/setup-node@v3
        #       with:
        #         node-version: 18

        #     - name: Cache Node.js modules
        #       uses: actions/cache@v3
        #       with:
        #         path: |
        #           **/node_modules
        #         key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        #         restore-keys: |
        #           ${{ runner.os }}-node-

        # # Job for the frontend
        # frontend:
        #   name: Frontend Build and Test
        #   runs-on: ubuntu-latest
        #   needs: setup-node
        #   steps:
        #     - name: Checkout code
        #       uses: actions/checkout@v3

        #     - name: Use Node.js 18.x
        #       uses: actions/setup-node@v3
        #       with:
        #         node-version: 18

        #     - name: Set up frontend dependencies
        #       working-directory: ./frontend
        #       run: npm install

        #     # - name: Lint frontend
        #     #   working-directory: ./frontend
        #     #   run: npm run lint

        #     # - name: Test frontend
        #     #   working-directory: ./frontend
        #     #   run: npm test

        #     - name: Build frontend
        #       working-directory: ./frontend
        #       run: npm run build
